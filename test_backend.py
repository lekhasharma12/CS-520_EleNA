from services.route_finder import *
from utils.utils import *
import unittest
from models.route import Route
from controllers.route_controller import *
import osmnx as ox
from routes.blueprint import *
import requests
from flask import request

def load_graph():
    graph = pickle.load(open('./graphs/test.pickle', 'rb'))
    return graph

class TestRouteFinder(unittest.TestCase):
    
    #UTILS TESTS
    #Positive TC to check whether all inputs are correct
    def test_validate_for_errors_POS(self):
        elevation_type = 'max'
        percent_increase = 30
        mode = 'bike'
        source = "147 Brittany Manor Drive"
        dest = "UMass Amherst"
        error, error_msg = validate_for_errors(source, dest, elevation_type, percent_increase, mode)
        self.assertEqual(error, False)

    #Negative TC when mode type is wrong
    def test_validate_for_errors_NEG_MODE(self):
        elevation_type = 'max'
        percent_increase = 20
        mode = 'car'
        source = "147 Brittany Manor Drive"
        dest = "UMass Amherst"
        error, error_msg = validate_for_errors(source, dest, elevation_type, percent_increase, mode)
        self.assertEqual(error, True)
        self.assertIn(error_msg,'True Mode of transport is incorrect. Please select either walking or biking')

    #POSITIVE TC to get node from given coordinates
    def test_get_node_from_coordinates(self):
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        graph = load_graph()
        result = get_node_from_coordinates(graph, ox.geocode(source))
        self.assertEqual(1439024846, result)

    def test_get_elevation_data(self):
        graph = load_graph()
        result = get_elevation_data(graph)
        expected_result = [{'elevation': 65.0}, {'elevation': 61.0}, {'elevation': 63.0}, {'elevation': 72.0}, {'elevation': 72.0}, {'elevation': 68.0}, {'elevation': 67.0}, {'elevation': 65.0}, {'elevation': 66.0}, {'elevation': 57.0}, {'elevation': 58.0}, {'elevation': 62.0}, {'elevation': 68.0}, {'elevation': 72.0}, {'elevation': 74.0}, {'elevation': 69.0}, {'elevation': 69.0}, {'elevation': 69.0}, {'elevation': 67.0}, {'elevation': 61.0}, {'elevation': 58.0}, {'elevation': 60.0}, {'elevation': 59.0}, {'elevation': 59.0}]
        self.assertEqual(expected_result, result)

    def test_add_elevation_data(self):
        graph = load_graph()
        result = add_elevation_data(graph)

    def test_get_place_mode_graph(self):
        mode = 'walk'
        city = 'Amherst'
        state = 'Massachusetts'
        result = get_place_mode_graph(city,state,mode)
        self.assertIn(str(result),'MultiDiGraph with 7280 nodes and 20300 edges')


    def test_make_graph(self):
        mode = 'walk'
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        result = make_graph(source,mode)
        self.assertIn(str(result),"MultiDiGraph with 32309 nodes and 86984 edges")
        
        
    #Negative TC when precentage increase is wrong
    def test_validate_for_errors_NEG_PERCENTAGE_INC(self):
        elevation_type = 'max'
        percent_increase = 200
        mode = 'walk'
        source = "147 Brittany Manor Drive"
        dest = "UMass Amherst"
        error, error_msg = validate_for_errors(source, dest, elevation_type, percent_increase, mode)
        self.assertEqual(error, True)
        print(error_msg)
        self.assertIn(error_msg,'Percentage increase in the shortest route is incorrect. Please select a value between 0-100')
        
    
    #ROUTE_FINDER TESTS
    #Test dijsktras for shortest path
    def test_dijskstras(self):
        elevation_type = 'max'
        percent_increase = 20
        mode = 'bike'
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        destination = "Puffers Pond, Amherst"
        city = "Amherst"
        state = "Massachusetts"
        route = Route(source, destination, elevation_type, percent_increase, mode, city, state)
        expected_result = {'elevation': -29.0, 'distance': 8314.775000000001, 'path': [7058913917, 7058913916, 66656988, 66643538, 6655624009, 6655623989, 6655624004, 6655623992, 6655623986, 6655623985, 66641424, 66667006, 6655623965, 66723660, 6655623958, 6655623931, 6655623929, 6655623928, 6655623901, 6655623902, 7148671786, 9065016058, 9065016059, 9065016054, 66631944, 66751010, 6655623924, 66715414, 8320860424, 8320860420, 66646853, 3033372899, 66652025, 66591361, 6775672007, 66721706, 66713678, 3271341815, 66704925, 3271344786, 66745361, 3271344801, 6302552893, 66704169, 6302552856, 66686920, 6312825848, 3033372907, 66593243, 6302553059, 6302552850, 4919132556, 6302552836, 66618152, 66613374, 6302552831, 6346197783, 6302552462, 5869847103, 6757293529, 6302552392, 6302552453, 66714028, 6302552451, 8530933989, 6312825851, 66696544, 6312825856, 6050584821, 6744652172, 6302552397, 6050584833, 6336753691, 66672799, 9052567912, 6744652169, 6346197711, 6346197718, 6744652168, 66766087, 4829289747, 5489277570, 66767773, 6744493013, 6744481746, 6744481752, 6744481753, 6744493019, 6744481781, 6744481776, 6205848223, 66692123, 6304679368, 66768883, 66743313, 66619622, 9057689664, 66773834, 6304679589, 66717133, 66599020, 66775470, 9050970126, 66763147, 6313650221, 66612825, 66655982, 6313650218, 6765025817, 66764005, 6951510799, 9076976982, 9079037074, 6988996104, 5261586177, 8454885986, 66739703, 4594428780, 66702095, 8320513042, 66597142, 8631420487, 8191010069, 66680313, 66712389, 66654462, 66760756, 66701447, 66745889, 9076367307, 8320513038, 9050356671, 9050356669, 2111347918, 66611431, 66691893, 66746572, 1843788747, 66732034, 1669520735, 1669520769]}
        result_dijkstras = dijkstras(route.graph, route.source_node, route.destination_node)
        self.assertIsInstance(result_dijkstras, dict)

    
    #Test astar for shortest path
    def test_astar(self):
        elevation_type = 'max'
        percent_increase = 20
        mode = 'bike'
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        destination = "Puffers Pond, Amherst"
        city = "Amherst"
        state = "Massachusetts"
        route = Route(source, destination, elevation_type, percent_increase, mode, city, state)
        expected_result = {'elevation': -29.0, 'distance': 8314.775000000001, 'path': [7058913917, 7058913916, 66656988, 66643538, 6655624009, 6655623989, 6655624004, 6655623992, 6655623986, 6655623985, 66641424, 66667006, 6655623965, 66723660, 6655623958, 6655623931, 6655623929, 6655623928, 6655623901, 6655623902, 7148671786, 9065016058, 9065016059, 9065016054, 66631944, 66751010, 6655623924, 66715414, 8320860424, 8320860420, 66646853, 3033372899, 66652025, 66591361, 6775672007, 66721706, 66713678, 3271341815, 66704925, 3271344786, 66745361, 3271344801, 6302552893, 66704169, 6302552856, 66686920, 6312825848, 3033372907, 66593243, 6302553059, 6302552850, 4919132556, 6302552836, 66618152, 66613374, 6302552831, 6346197783, 6302552462, 5869847103, 6757293529, 6302552392, 6302552453, 66714028, 6302552451, 8530933989, 6312825851, 66696544, 6312825856, 6050584821, 6744652172, 6302552397, 6050584833, 6336753691, 66672799, 9052567912, 6744652169, 6346197711, 6346197718, 6744652168, 66766087, 4829289747, 5489277570, 66767773, 6744493013, 6744481746, 6744481752, 6744481753, 6744493019, 6744481781, 6744481776, 6205848223, 66692123, 6304679368, 66768883, 66743313, 66619622, 9057689664, 66773834, 6304679589, 66717133, 66599020, 66775470, 9050970126, 66763147, 6313650221, 66612825, 66655982, 6313650218, 6765025817, 66764005, 6951510799, 9076976982, 9079037074, 6988996104, 5261586177, 8454885986, 66739703, 4594428780, 66702095, 8320513042, 66597142, 8631420487, 8191010069, 66680313, 66712389, 66654462, 66760756, 66701447, 66745889, 9076367307, 8320513038, 9050356671, 9050356669, 2111347918, 66611431, 66691893, 66746572, 1843788747, 66732034, 1669520735, 1669520769]}
        result_astar = astar(route.graph, route.source_node, route.destination_node)
        self.assertIsInstance(result_astar, dict)
        #self.assertDictEqual(expected_result, result_astar)
        

    def test_dijkstras_with_elevation(self):
        elevation_type = 'max'
        percent_increase = 20
        mode = 'bike'
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        destination = "Puffers Pond, Amherst"
        city = "Amherst"
        state = "Massachusetts"
        route = Route(source, destination, elevation_type, percent_increase, mode, city, state)
        result = dijkstras_with_elevation(route.graph,route.source_node,route.destination_node,route.elevation_type,route.percent_increase,route.mode)
        expected_result = {'elevation': (46.0, 122.0), 'distance': 9.107183000000001, 'time': 0.45535915000000005, 'path': [(-72.5278877, 42.3495193), (-72.5279153, 42.3497246), (-72.527639, 42.349854), (-72.527387, 42.35076), (-72.5273814, 42.351494), (-72.527381, 42.351556), (-72.5260337, 42.3515867), (-72.525857, 42.351601), (-72.5257443, 42.3516113), (-72.525012, 42.351708), (-72.524353, 42.351839), (-72.5221039, 42.3541171), (-72.522022, 42.354221), (-72.521744, 42.3545731), (-72.5210113, 42.3556561), (-72.5210566, 42.3557675), (-72.5210408, 42.3558147), (-72.5210161, 42.3574905), (-72.5210083, 42.3577576), (-72.5209888, 42.3581485), (-72.5209708, 42.3595563), (-72.5209696, 42.3596156), (-72.5209524, 42.3606794), (-72.5208856, 42.3619662), (-72.520866, 42.36264), (-72.5209103, 42.3628323), (-72.5208976, 42.3632934), (-72.5207342, 42.3646983), (-72.5206533, 42.3653703), (-72.5204281, 42.3672818), (-72.520423, 42.367325), (-72.523307, 42.367126), (-72.522787, 42.368434), (-72.521171, 42.370744), (-72.521211, 42.3710013), (-72.521438, 42.372461), (-72.5211667, 42.3726155), (-72.5200234, 42.3731753), (-72.5200272, 42.3732617), (-72.5199669, 42.3733474), (-72.5199656, 42.3739981), (-72.5199657, 42.374404), (-72.5205116, 42.3746078), (-72.5205161, 42.3748606), (-72.5199644, 42.3748528), (-72.5199653, 42.3748912), (-72.5199567, 42.3754171), (-72.5199553, 42.375529), (-72.5198372, 42.3755319), (-72.5198407, 42.3756538), (-72.5198495, 42.375831), (-72.5198579, 42.3759417), (-72.5200281, 42.3759399), (-72.520037, 42.3763473), (-72.5200495, 42.3768015), (-72.5200574, 42.3770541), (-72.5200647, 42.3773703), (-72.5206367, 42.3773593), (-72.520648, 42.3775862), (-72.5208926, 42.3775792), (-72.5206353, 42.3778727), (-72.5203146, 42.3779447), (-72.5200781, 42.3779978), (-72.520079, 42.378038), (-72.5200798, 42.3780754), (-72.5200834, 42.3783612), (-72.5200844, 42.3783947), (-72.5200909, 42.3786583), (-72.5199279, 42.3786607), (-72.51992, 42.378757), (-72.519771, 42.379239), (-72.5197538, 42.3792833), (-72.5197519, 42.3792881), (-72.519864, 42.3793331), (-72.5200284, 42.379331), (-72.520053, 42.3795839), (-72.5200825, 42.3798876), (-72.520111, 42.380181), (-72.5202122, 42.3801775), (-72.5202163, 42.3802296), (-72.5202334, 42.3804455), (-72.5202538, 42.380702), (-72.5201561, 42.380704), (-72.5201712, 42.3808787), (-72.5201771, 42.3809466), (-72.520215, 42.3813826), (-72.5202538, 42.3817831), (-72.5201417, 42.382221), (-72.520048, 42.382266), (-72.5202792, 42.3825865), (-72.5201681, 42.3825829), (-72.5198585, 42.3825729), (-72.5194255, 42.3824279), (-72.5192542, 42.3824209), (-72.519073, 42.3830917), (-72.5186175, 42.3837974), (-72.5182425, 42.3842597), (-72.5181425, 42.3842435), (-72.5180024, 42.3844829), (-72.5172671, 42.386531), (-72.517103, 42.38723), (-72.5169437, 42.3882703), (-72.516937, 42.388314), (-72.5168853, 42.3887088), (-72.51643, 42.392618), (-72.516086, 42.3933794), (-72.51565, 42.394764), (-72.5155523, 42.3952761), (-72.515468, 42.395689), (-72.515406, 42.396081), (-72.5155249, 42.3975399), (-72.5156472, 42.3983783), (-72.515657, 42.398497), (-72.5157425, 42.3992268), (-72.5157502, 42.3993965), (-72.5156988, 42.4005109), (-72.5156409, 42.400891), (-72.515491, 42.4016465), (-72.5154553, 42.4018179), (-72.515346, 42.402342), (-72.515331, 42.402412), (-72.514866, 42.404664), (-72.5147667, 42.4052107), (-72.5147, 42.405593), (-72.5146124, 42.4061123), (-72.514578, 42.406321), (-72.51454, 42.406564), (-72.514311, 42.40798), (-72.514259, 42.408281), (-72.514198, 42.408608), (-72.514142, 42.408899), (-72.514065, 42.40923), (-72.5139273, 42.4097828), (-72.5138638, 42.4100375), (-72.5138437, 42.4101184), (-72.5137957, 42.4103109), (-72.513701, 42.410688), (-72.5131691, 42.4129141), (-72.513611, 42.412817), (-72.514542, 42.413042), (-72.514199, 42.413975), (-72.516219, 42.415871), (-72.5149285, 42.4160868), (-72.516397, 42.417253)]}
        self.assertDictEqual(result,expected_result)
    

    def test_astar_with_elevation(self):
        elevation_type = 'max'
        percent_increase = 20
        mode = 'bike'
        source = "147, Brittany Manor Drive, The Boulders, Mill Valley, Amherst, Hampshire County, Massachusetts, 01002"
        destination = "Puffers Pond, Amherst"
        city = "Amherst"
        state = "Massachusetts"
        route = Route(source, destination, elevation_type, percent_increase, mode, city, state)
        result = astar_with_elevation(route.graph,route.source_node,route.destination_node,route.elevation_type,route.percent_increase,route.mode)
        expected_result = {'elevation': (46.0, 122.0), 'distance': 9.617215, 'time': 0.48086075, 'path': [(-72.5278877, 42.3495193), (-72.5279153, 42.3497246), (-72.527639, 42.349854), (-72.527387, 42.35076), (-72.5273814, 42.351494), (-72.527381, 42.351556), (-72.52788, 42.351557), (-72.527895, 42.352808), (-72.524164, 42.354), (-72.523876, 42.354367), (-72.522159, 42.3542445), (-72.521744, 42.3545731), (-72.5210113, 42.3556561), (-72.520872, 42.355679), (-72.5208958, 42.3557958), (-72.5210408, 42.3558147), (-72.5210161, 42.3574905), (-72.520916, 42.357487), (-72.520902, 42.3577565), (-72.5208795, 42.3581509), (-72.5208137, 42.3594659), (-72.5208019, 42.3597326), (-72.520781, 42.360697), (-72.520759, 42.361988), (-72.5208856, 42.3619662), (-72.520866, 42.36264), (-72.5209103, 42.3628323), (-72.520754, 42.362842), (-72.5207438, 42.3632958), (-72.5205837, 42.3647228), (-72.520462, 42.365412), (-72.5201978, 42.3671126), (-72.520181, 42.36722), (-72.520172, 42.367305), (-72.520053, 42.368243), (-72.519979, 42.368846), (-72.5198274, 42.3704154), (-72.5198187, 42.3705396), (-72.51981, 42.370665), (-72.5197538, 42.3721004), (-72.5198816, 42.3721025), (-72.5198931, 42.3723534), (-72.5199565, 42.3730562), (-72.5200247, 42.3730994), (-72.5200234, 42.3731753), (-72.519809, 42.373212), (-72.5198112, 42.3733559), (-72.5197036, 42.3733586), (-72.5197148, 42.3739542), (-72.5197144, 42.3746965), (-72.519715, 42.3748005), (-72.5197155, 42.374889), (-72.5197188, 42.3749097), (-72.5197196, 42.3750149), (-72.5197218, 42.3753673), (-72.5196826, 42.3754616), (-72.5189908, 42.375481), (-72.5189941, 42.3755788), (-72.519, 42.3757038), (-72.5189108, 42.3757253), (-72.5189139, 42.3756434), (-72.5185884, 42.3756739), (-72.5181142, 42.3757037), (-72.5181194, 42.3757671), (-72.5183056, 42.3757673), (-72.5183081, 42.3758484), (-72.5184695, 42.3761986), (-72.5186592, 42.3766452), (-72.5186762, 42.3768833), (-72.5187396, 42.3768828), (-72.5192207, 42.3768748), (-72.5197516, 42.376868), (-72.5197531, 42.3768075), (-72.5198942, 42.3768068), (-72.5199063, 42.3770627), (-72.5200574, 42.3770541), (-72.5200647, 42.3773703), (-72.519912, 42.3773725), (-72.5199094, 42.3774968), (-72.5199108, 42.37756), (-72.5199115, 42.3776189), (-72.5200699, 42.3776127), (-72.5200766, 42.3778346), (-72.5200781, 42.3779978), (-72.520079, 42.378038), (-72.5200798, 42.3780754), (-72.5200834, 42.3783612), (-72.5200844, 42.3783947), (-72.5200909, 42.3786583), (-72.5200934, 42.3787475), (-72.5200981, 42.3789183), (-72.519889, 42.3792632), (-72.519864, 42.3793331), (-72.5195984, 42.3799351), (-72.5194247, 42.3813705), (-72.5195244, 42.3816279), (-72.5201417, 42.382221), (-72.520048, 42.382266), (-72.5202792, 42.3825865), (-72.5201681, 42.3825829), (-72.5198585, 42.3825729), (-72.5194255, 42.3824279), (-72.5192542, 42.3824209), (-72.5191409, 42.3824162), (-72.518922, 42.383062), (-72.5184696, 42.3837417), (-72.518439, 42.383787), (-72.5181425, 42.3842435), (-72.5180024, 42.3844829), (-72.5172671, 42.386531), (-72.517103, 42.38723), (-72.5169437, 42.3882703), (-72.516937, 42.388314), (-72.5168853, 42.3887088), (-72.51643, 42.392618), (-72.516086, 42.3933794), (-72.51565, 42.394764), (-72.5155523, 42.3952761), (-72.515468, 42.395689), (-72.515406, 42.396081), (-72.5155249, 42.3975399), (-72.5156472, 42.3983783), (-72.515657, 42.398497), (-72.5157425, 42.3992268), (-72.5157502, 42.3993965), (-72.5156988, 42.4005109), (-72.5156409, 42.400891), (-72.515491, 42.4016465), (-72.517088, 42.401983), (-72.516964, 42.4020925), (-72.515331, 42.402412), (-72.514866, 42.404664), (-72.5147667, 42.4052107), (-72.5147, 42.405593), (-72.5146124, 42.4061123), (-72.514578, 42.406321), (-72.51454, 42.406564), (-72.514311, 42.40798), (-72.514259, 42.408281), (-72.5131196, 42.408153), (-72.512231, 42.408048), (-72.512169, 42.408361), (-72.512094, 42.408665), (-72.512955, 42.409096), (-72.514065, 42.40923), (-72.5139273, 42.4097828), (-72.5138638, 42.4100375), (-72.5138437, 42.4101184), (-72.5137957, 42.4103109), (-72.513701, 42.410688), (-72.5131691, 42.4129141), (-72.513611, 42.412817), (-72.514542, 42.413042), (-72.514199, 42.413975), (-72.516219, 42.415871), (-72.5149285, 42.4160868), (-72.516397, 42.417253)]}        
        self.assertDictEqual(result,expected_result)
    

    #Testcases for CONTROLLER shortest_path
    def test_shortestpath_route_min_elevation(self):
        request_data = {
            "source": {
                "description": "University of Massachusetts Amherst, Amherst, MA, USA"
            },
            "destination": {
                "description": "Puffers Pond, Amherst, MA, USA"
            },
            "elevation_type": "min",
            "percent_increase": 10,
            "mode": "walk"
        }
        url = "http://localhost:5000"
        response = requests.post(url+'/elena/shortestpath', json=request_data)
        result = response.json()
        expected_result = {'distance': 5.0862929999999995, 'elevation': [45.0, 92.0], 'path': [[-72.5323711, 42.3843993], [-72.53249, 42.384784], [-72.53255, 42.384883], [-72.530962, 42.385163], [-72.5309726, 42.3857393], [-72.5313467, 42.3866724], [-72.5319209, 42.3881024], [-72.5321095, 42.3882461], [-72.5324341, 42.388982], [-72.5329343, 42.3901191], [-72.5329682, 42.3902053], [-72.5330041, 42.3902964], [-72.533344, 42.3911073], [-72.5334512, 42.3913662], [-72.5333072, 42.3913943], [-72.533188, 42.391419], [-72.5336679, 42.3925542], [-72.5337203, 42.3926952], [-72.5333034, 42.3928029], [-72.5329517, 42.3929607], [-72.532451, 42.3932468], [-72.5323138, 42.3933361], [-72.532329, 42.3933946], [-72.5313358, 42.3939061], [-72.5312741, 42.3939098], [-72.5308201, 42.3939459], [-72.5305522, 42.394118], [-72.5306859, 42.3943336], [-72.5308035, 42.3945516], [-72.5310194, 42.3949457], [-72.5305182, 42.3950487], [-72.5307437, 42.395323], [-72.5306149, 42.3957209], [-72.530591, 42.395798], [-72.5303878, 42.3961987], [-72.5299404, 42.3963398], [-72.5303304, 42.39766], [-72.5292223, 42.3978482], [-72.5281495, 42.3980305], [-72.5281524, 42.3981042], [-72.5281231, 42.3987809], [-72.5280954, 42.3993252], [-72.5285497, 42.4022885], [-72.5285657, 42.4023181], [-72.5293189, 42.4034294], [-72.5293416, 42.4034605], [-72.529264, 42.403496], [-72.5291974, 42.40352], [-72.5296306, 42.404552], [-72.5296308, 42.4049231], [-72.5298931, 42.4069047], [-72.5273371, 42.4076606], [-72.5251034, 42.4083294], [-72.5240473, 42.408758], [-72.523487, 42.409314], [-72.5240137, 42.4106489], [-72.523745, 42.410677], [-72.5212212, 42.4126064], [-72.520902, 42.412934], [-72.520094, 42.413747], [-72.5190085, 42.4148783], [-72.517076, 42.415559], [-72.516219, 42.415871], [-72.5149285, 42.4160868], [-72.516397, 42.417253]], 'time': 1.2715732499999999}
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result, expected_result)


    #Testcases for CONTROLLER shortest_path
    def test_shortestpath_route_max_elevation(self):
        request_data = {
            "source": {
                "description": "University of Massachusetts Amherst, Amherst, MA, USA"
            },
            "destination": {
                "description": "Puffers Pond, Amherst, MA, USA"
            },
            "elevation_type": "max",
            "percent_increase": 10,
            "mode": "walk"
        }
        url = "http://localhost:5000"
        response = requests.post(url+'/elena/shortestpath', json=request_data)
        result = response.json()
        expected_result = {'distance': 5.1493400000000005, 'elevation': [45.0, 112.0], 'path': [[-72.5323711, 42.3843993], [-72.53249, 42.384784], [-72.531276, 42.385039], [-72.5309634, 42.385052], [-72.529718, 42.384877], [-72.5287563, 42.3847081], [-72.528595, 42.384707], [-72.52856, 42.3847076], [-72.5285429, 42.3848679], [-72.5285301, 42.3849303], [-72.5284871, 42.3853796], [-72.5284678, 42.3854147], [-72.5284391, 42.3854598], [-72.5283609, 42.3860189], [-72.5277209, 42.386181], [-72.5279604, 42.386784], [-72.5279713, 42.3868118], [-72.5276903, 42.3870088], [-72.5276775, 42.3873415], [-72.52763, 42.3876161], [-72.5276116, 42.3877221], [-72.5276278, 42.3877586], [-72.5277109, 42.3879461], [-72.5274008, 42.3880791], [-72.5273207, 42.3882126], [-72.5272689, 42.3882476], [-72.5272563, 42.3883249], [-72.5272445, 42.3883979], [-72.5271998, 42.3887089], [-72.527138, 42.3891731], [-72.5271162, 42.3892503], [-72.5270041, 42.3897778], [-72.5268036, 42.3903052], [-72.5267512, 42.3905813], [-72.526213, 42.3906364], [-72.526222, 42.3906973], [-72.5264753, 42.3912175], [-72.5265601, 42.3913459], [-72.5262922, 42.3914827], [-72.5264069, 42.3918309], [-72.5264308, 42.3918881], [-72.5265402, 42.392129], [-72.526581, 42.3924719], [-72.5265139, 42.3925026], [-72.5263779, 42.392855], [-72.5260832, 42.3933334], [-72.5260382, 42.3933506], [-72.5259278, 42.393386], [-72.5258221, 42.3934125], [-72.5256362, 42.3934758], [-72.5254718, 42.3935376], [-72.5252549, 42.3936413], [-72.5249111, 42.393819], [-72.5245877, 42.3939404], [-72.5243906, 42.3940139], [-72.5241594, 42.3940993], [-72.5239308, 42.3941777], [-72.5237132, 42.3941859], [-72.5236271, 42.3941874], [-72.5235401, 42.3941848], [-72.5236435, 42.3962218], [-72.5230927, 42.3968187], [-72.5214301, 42.3971628], [-72.5211656, 42.3971928], [-72.5203286, 42.3972608], [-72.5202307, 42.397269], [-72.5174699, 42.3979248], [-72.515657, 42.398497], [-72.5157425, 42.3992268], [-72.5157502, 42.3993965], [-72.5156988, 42.4005109], [-72.5156409, 42.400891], [-72.515491, 42.4016465], [-72.5154553, 42.4018179], [-72.515346, 42.402342], [-72.515331, 42.402412], [-72.514866, 42.404664], [-72.5147667, 42.4052107], [-72.5147, 42.405593], [-72.5146124, 42.4061123], [-72.514578, 42.406321], [-72.51454, 42.406564], [-72.514311, 42.40798], [-72.514259, 42.408281], [-72.514198, 42.408608], [-72.514142, 42.408899], [-72.514065, 42.40923], [-72.5139273, 42.4097828], [-72.5138638, 42.4100375], [-72.5138437, 42.4101184], [-72.5137957, 42.4103109], [-72.513701, 42.410688], [-72.5131691, 42.4129141], [-72.513611, 42.412817], [-72.514542, 42.413042], [-72.514199, 42.413975], [-72.516219, 42.415871], [-72.5149285, 42.4160868], [-72.516397, 42.417253]], 'time': 1.2873350000000001}
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result, expected_result)

    def test_shortestpath_route_invalid_input(self):
        request_data = {
            "source": {
                "description": "University of Massachusetts Amherst, Amherst, MA, USA"
            },
            "destination": {
                "description": "Puffers Pond, Amherst, MA, USA"
            },
            "elevation_type": "min",
            "percent_increase": 1000,
            "mode": "walk"
        }
        url = "http://localhost:5000"
        response = requests.post(url+'/elena/shortestpath', json=request_data)
        res_data =response.json()
        expected_result = 'Percentage increase in the shortest route is incorrect. Please select a value between 0-100'
        self.assertEqual(response.status_code, 200)
        self.assertIn(res_data,expected_result)

if __name__ == '__main__':
    unittest.main()

